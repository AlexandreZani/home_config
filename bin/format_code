#! /usr/bin/env python3

import subprocess
import os
import pathlib

def GetModifiedFiles(cwd):
  cmd = [
      'git', 'status',
      '--porcelain',
      '--untracked-files=no',
      '--ignored=no',
      '--no-renames',
      '--ignore-submodules=all']
  completed = subprocess.run(cmd, capture_output=True, check=True)
  stdout = completed.stdout.decode()
  changes = stdout.split('\n')[:-1]
  files = [pathlib.Path(cwd, f[3:]) for f in changes]
  return files

class Formatter(object):
  def filter(self, path):
    return False

  def format(self, path):
    cmd = self._get_cmd(path)
    print('Formatting {}'.format(path))
    completed = subprocess.run(cmd, check=True)
    if completed.returncode != 0:
      print('Failure!', repr(' '.join(cmd)))

  def _get_cmd(self, path):
    raise NotImplementedError


class ClangFormat(Formatter):
  def filter(self, path):
    return path.suffix in ['.cc', '.h', '.c']

  def _get_cmd(self, path):
    return [
        '/usr/bin/clang-format',
        '-style=google',
        '-i',
        str(path)]

class Buildifier(Formatter):
  def filter(self, path):
    if path.parts[-1] == 'BUILD':
      return True

    return path.suffix in ['.bazel']

  def _get_cmd(self, path):
    return [
        'buildifier',
        str(path)]

class DispatchFormatter(Formatter):
  def __init__(self):
    self._formatters = [
        ClangFormat(),
        Buildifier(),
        ]

  def format(self, path):
    for formatter in self._formatters:
      if formatter.filter(path):
        formatter.format(path)


if __name__ == '__main__':
  cwd = pathlib.Path.cwd()
  print(cwd)
  mod_files = GetModifiedFiles(cwd)
  formatter = DispatchFormatter()
  for p in mod_files:
    formatter.format(p)
